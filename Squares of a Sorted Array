Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

 Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].

//--------Solution-----------//

/*********============   Bruite force method   ===========*******//
public:
    vector<int> sortedSquares(vector<int>& nums) {
       for(int i=0;i<nums.size();i++)
        nums[i]=nums[i]*nums[i];
       
       sort(nums.begin(),nums.end());

       return nums;
    }

/*********============   optimal solution   ===========*******//

public:
    vector<int> sortedSquares(vector<int>& nums) {
        int n=nums.size();
        vector<int>result(n);
        int left =0;
        int right=n-1;
        int pos = n-1;

        while(left<=right){
            if(abs(nums[left])>abs(nums[right])){
                result[pos]=nums[left]*nums[left];
                left++;
            }else{
                result[pos]=nums[right]*nums[right];
                right--;
            }
            pos--;
        }

        return result;
    }
