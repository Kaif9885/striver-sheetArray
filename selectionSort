///--------Example 1:------//

Input:
N = 5
arr[] = {4, 1, 3, 9, 7}
Output:
1 3 4 7 9
Explanation:
Maintain sorted (in bold) and unsorted subarrays.
Select 1. Array becomes 1 4 3 9 7.
Select 3. Array becomes 1 3 4 9 7.
Select 4. Array becomes 1 3 4 9 7.
Select 7. Array becomes 1 3 4 7 9.
Select 9. Array becomes 1 3 4 7 9.

///--------Solution------//
public:
     
    void selectionSort(int arr[], int n)
    {
       //code here
      for (int i = 0; i <= n - 2; i++) {
        // Assume the current element is the minimum
        int minIndex = i;
        
        // Find the minimum element in the unsorted part of the array
        for (int j = i ; j <= n-1; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        
        // Swap the found minimum element with the first element
             int temp = arr[minIndex];
             arr[minIndex]= arr[i];
             arr[i] = temp;
           
        
      }
    }
};

